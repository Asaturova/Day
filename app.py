from flask import Flask, request, jsonify
from enum import Enum
from supabase import create_client
import uuid

app = Flask(__name__)

# üîê –¢–≤–æ–∏ –∫–ª—é—á–∏ Supabase
SUPABASE_URL = "https://fejzbmttbhyhenfxnjkq.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."  # —É–∫–æ—Ä–æ—Ç–∏–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# üìö Enum ‚Äî –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
class ReasonType(Enum):
    SICK_LEAVE = "–±–æ–ª–µ–µ—Ç"
    HOLIDAY = "–ø—Ä–∞–∑–¥–Ω–∏–∫"
    UNKNOWN = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    DAY_OFF = "–æ—Ç–≥—É–ª"

ALLOWED_REASONS = [r.value for r in ReasonType]

# ===================== EMPLOYERS =====================

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.route("/employers", methods=["POST"])
def add_employer():
    data = request.get_json()

    required = ['firstName', 'lastName', 'jobTitle']
    for field in required:
        if field not in data:
            return jsonify({"error": f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400

    data["id"] = str(uuid.uuid4())
    data.setdefault("profile_image", "")  # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏

    try:
        response = supabase.table("employers").insert(data).execute()
        return jsonify({"message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", "id": data["id"]}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@app.route("/employers", methods=["GET"])
def get_all_employers():
    try:
        response = supabase.table("employers").select("*").execute()
        return jsonify(response.data), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üë§ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.route("/employers/<employer_id>", methods=["GET"])
def get_employer(employer_id):
    try:
        response = (
            supabase.table("employers")
            .select("*")
            .eq("id", employer_id)
            .single()
            .execute()
        )
        return jsonify(response.data), 200
    except Exception as e:
        return jsonify({"error": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}"}), 404

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.route("/employers/<employer_id>", methods=["PUT"])
def update_employer(employer_id):
    data = request.get_json()

    try:
        response = (
            supabase.table("employers")
            .update(data)
            .eq("id", employer_id)
            .execute()
        )
        return jsonify({"message": "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "data": response.data}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.route("/employers/<employer_id>", methods=["DELETE"])
def delete_employer(employer_id):
    try:
        response = (
            supabase.table("employers")
            .delete()
            .eq("id", employer_id)
            .execute()
        )
        return jsonify({"message": "–£–¥–∞–ª–µ–Ω–æ"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ===================== DAY OFFS =====================

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π
@app.route("/day_offs", methods=["POST"])
def add_day_off():
    data = request.get_json()

    required = ['start_date', 'end_date', 'reason', 'employer_id']
    for field in required:
        if field not in data:
            return jsonify({"error": f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400

    if data['reason'] not in ALLOWED_REASONS:
        return jsonify({
            "error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø—Ä–∏—á–∏–Ω–∞",
            "–¥–æ–ø—É—Å—Ç–∏–º—ã–µ_–ø—Ä–∏—á–∏–Ω—ã": ALLOWED_REASONS
        }), 400

    data["id"] = str(uuid.uuid4())

    try:
        response = supabase.table("day_offs").insert(data).execute()
        return jsonify({"message": "–í—ã—Ö–æ–¥–Ω–æ–π –¥–æ–±–∞–≤–ª–µ–Ω", "data": response.data}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
@app.route("/day_offs/<employer_id>", methods=["GET"])
def get_day_offs(employer_id):
    try:
        result = (
            supabase.table("day_offs")
            .select("*")
            .eq("employer_id", employer_id)
            .order("start_date", desc=False)
            .execute()
        )

        if not result.data:
            return jsonify({"message": "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"}), 404

        return jsonify(result.data), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π
@app.route("/day_offs/<dayoff_id>", methods=["PUT"])
def update_day_off(dayoff_id):
    data = request.get_json()
    try:
        response = (
            supabase.table("day_offs")
            .update(data)
            .eq("id", dayoff_id)
            .execute()
        )
        return jsonify({"message": "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "data": response.data}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π
@app.route("/day_offs/<dayoff_id>", methods=["DELETE"])
def delete_day_off(dayoff_id):
    try:
        response = (
            supabase.table("day_offs")
            .delete()
            .eq("id", dayoff_id)
            .execute()
        )
        return jsonify({"message": "–í—ã—Ö–æ–¥–Ω–æ–π —É–¥–∞–ª—ë–Ω"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ===================== –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê =====================

if __name__ == "__main__":
    app.run(debug=True)